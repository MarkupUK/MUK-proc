<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	version="5.0">
	<title>Technical Configuration</title>

    <para><xref linkend="serverless_architecture_for_xspec_tests"/> illustrates the workflow for running XSpec tests in a serverless architecture.
        <figure xml:id="serverless_architecture_for_xspec_tests">
            <title>Workflow for running XSpec tests in a serverless architecture</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/serverless.svg" scale="50"/>
                </imageobject>
            </mediaobject>
        </figure>
    </para>

    <para>The workflow comprises the following steps: 
        <orderedlist>
            <listitem>
                <para>A developer pushes a code change into a private git repository.</para>
            </listitem>
            <listitem>
                <para>A git webhook sends a payload to an Amazon API gateway.</para>
            </listitem>
            <listitem>
                <para>The API gateway endpoint accepts the webhook request from git and triggers a Lambda function.</para>
            </listitem>
            <listitem>
                <para>The Lambda function connects over SSH to the git service. SSH private keys are stored securely using Amazon S3 and AWS KMS.</para>
            </listitem>
            <listitem>
                <para>The zipped content of the git repository is stored in S3.</para>
            </listitem>
            <listitem>
                <para>The S3 storage event triggers a lambda function that unzips the content of the git repository and executes XSpec tests.</para>
            </listitem>
            <listitem>
                <para>The report of the XSpec tests is stored in S3. A notification is sent via email through SNS to the development team.</para>
            </listitem>
        </orderedlist>
    </para>

    <para>For the readers unfamiliar with AWS, I shortly describe the purpose of each Amazon service mentioned in the diagram and in the next sections:

    <itemizedlist>
        <listitem><emphasis role="bold">Amazon API Gateway</emphasis>: a managed service allowing to create API endpoints <xref xlink:href="#api_gateway"/>.</listitem>
        <listitem><emphasis role="bold">Amazon S3</emphasis>: an object storage service (S3 stands for Simple Storage Service) <xref xlink:href="#s3"/>.</listitem>
        <listitem><emphasis role="bold">Amazon KMS</emphasis>: a managed service for creating, storing and accessing encryption keys (KMS stands for Key Management Service) <xref xlink:href="#kms"/>.</listitem>
        <listitem><emphasis role="bold">AWS Lambda</emphasis>: a service for building serverless applications and running code without managing servers <xref xlink:href="#lambda"/>.</listitem>
        <listitem><emphasis role="bold">Amazon SNS</emphasis>: a messaging service for sending notifications such as emails, sms, etc. to subscribing clients (SNS stands for Simple Notification Service) <xref xlink:href="#sns"/>.</listitem>
        <listitem><emphasis role="bold">AWS CloudFormation</emphasis>: a service for describing and provisioning infrastructure resources in AWS <xref xlink:href="#cloudformation"/>.</listitem>
        <listitem><emphasis role="bold">AWS IAM</emphasis>: a service for controlling access to AWS resources (IAM stands for Identity and Access Management) <xref xlink:href="#iam"/>.</listitem>
        <listitem><emphasis role="bold">Amazon CloudWatch</emphasis>: a service for monitoring AWS resources <xref xlink:href="#cloudwatch"/>.</listitem>
        <listitem><emphasis role="bold">AWS Billing and Cost Management</emphasis>: a service for paying, monitoring, and budgeting costs in AWS <xref xlink:href="#billing"/>.</listitem>
    </itemizedlist>

    </para>

    <para>In the next sections I am going to describe how to set up and configure the serveless architecture. First, I am going to link the private git repository with S3 in order to store changes whenever a user pushes new commits to git (steps 1 to 5). Then I'm goint to configure the lambda function to run XSpec tests and send notifications to the user (steps 6 and 7). Whenever possible, I will refer to code in my GitHub account so that readers wishing to replicate this can get hold of code examples and templates.</para>
   
    <section>
        <title>Linking Git to S3</title>
        <para>The easiest way to link git repositories to S3 and build the first part of the infrastructure in the diagram is to use the Quick Start deployment guide provided by AWS <xref xlink:href="#git2s3"/>. This contains a quick start button allowing to start all the necessary AWS resources with a single click using an AWS CloudFormation template. The process is thoroughly documented in the guide which also describes several options for customizing the configuration.</para>

        <para>In my GitHub repository <xref xlink:href="#markupuk2019"/> I wrote additional documentation for my configuration. In particular, I set up a GitHub private repository and used a GitHub webhook to send a payload to the AWS API Gateway whenever a new commit is pushed to the GitHub repository (this option is referred to as git pull endpoint in the Quick Start guide). <xref linkend="webhook"/>, taken from the official Quick Start documentation, illustrates the webhook workflow.

            <figure xml:id="webhook">
                <title>Workflow for triggering the webhook</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/webhook.png" scale="25"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>

        <para>This configuration covers points 1 to 5 of the diagram. At the end of the process the GitHub private repository is replicated in a zip file within S3.</para>
    </section>

    <section>
        <title>Lambda Configuration</title>

        <para>This configuration covers point 6 and 7 of the diagram. In particular, it describes the configuration for setting up the lambda function running XSpec tests. This entails:

            <orderedlist>
                <listitem><para>Retrieving the GitHub code stored in a zip file in S3.</para></listitem>
                <listitem><para>Unzipping the file and storing it in a local directory accessible by the lambda function.</para></listitem>
                <listitem><para>Setting up environment variables required by XSpec (i.e. paths to Saxon and HTML report).</para></listitem>
                <listitem><para>Running the XSpec test suite for all the XSpec tests stored in a given directory.</para></listitem>
                <listitem><para>Storing the HTML report in S3.</para></listitem>
                <listitem><para>Notifying the developer in case a test failed and providing a link for accessing the HTML report in S3.</para></listitem>
            </orderedlist>
        </para>

        <para>A step-by-step guide to replicate this configuration and the code for the lambda function is available in my GitHub account <xref xlink:href="#markupuk2019"/>. It is worth highlighting the following points:

            <itemizedlist>
                <listitem><para><emphasis role="bold">Custom Runtime</emphasis>: AWS Lambda natively supports lambda functions written in Java, Go, PowerShell, Node.js, C#, Python, and Ruby. AWS Lambda also provides a Runtime API allowing to implement the lambda function in any programming language <xref xlink:href="#custom_runtime"/>. I used the latter approach and implemented the lambda function in bash as calling the <code>xspec.sh</code> shell script is the simplest way to run the XSpec test suite. However, the lambda function could be re-written using virtually any programming language.</para></listitem>
                <listitem><para><emphasis role="bold">Layers</emphasis>: the lambda function makes use of layers <xref xlink:href="#layers"/>. A layer is a zip file containing additional libraries and dependencies. In particular, I used layers for the XSpec runtime, the Saxon HE jar file, and bash <xref xlink:href="#bash_layer"/>. It is also possible to add a layer for Apache Ant and run the XSpec test suite via Ant which can speed up the test suite execution. </para></listitem>
                <listitem><para><emphasis role="bold">Memory and Time Settings</emphasis>: these are configured in the settings for the lambda function. As running large XSpec test suites can be memory and time intensive, I recommend to adapt the values of memory and timeout accordingly. In my experience 512 MB memory and 2 minute timeout is a minimum threshold for running few XSpec tests.</para></listitem>
                <listitem><para><emphasis role="bold">IAM configuration</emphasis>: the lambda function is granted permissions to interact with other AWS services like S3 and SNS via a IAM role <xref xlink:href="#iam_role"/>. It is a good security practice to allow access only to the relevant S3 buckets.</para></listitem>
                <listitem><para><emphasis role="bold">Notification</emphasis>: I configured the lambda function to send email notifications via SNS (<xref linkend="email_notification"/> shows an example of email notification with a failed test). It is also possible to configure SNS to send notifications to a chat messaging service like Slack and this may be more appropriate for large development teams. 

            <figure xml:id="email_notification">
                <title>Email notification</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/email_notification.png" scale="50"/>
                    </imageobject>
                </mediaobject>
            </figure>
</para></listitem>
                <listitem><para><emphasis role="bold">CI Workflow</emphasis>: the lambda function is configured to stop as soon as a test fails: this is done in order to reduce the execution time and to lower costs. However, it is possible to adapt the lambda function to run the full test suite and report all the failing tests in the notification.</para></listitem>
                <listitem><para><emphasis role="bold">Troubleshooting</emphasis>: debugging a lambda function can be challenging as the environment upon which it runs is stateless. Using CloudWatch to monitor the execution of the function and outputting the results of commands to the CloudWatch logs is extremely useful for troubleshooting.</para></listitem>
            </itemizedlist>
        </para>
    </section>

</section>
