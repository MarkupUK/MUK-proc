<!DOCTYPE article SYSTEM "/dtds/docbook/docbook-5.0/dtd/docbook.dtd" [
<!ATTLIST date YYYY-MM-DD CDATA #REQUIRED>
<!ATTLIST confdates YYYY-MM-DD CDATA #REQUIRED>
<!ATTLIST biblioref linkend IDREFS #REQUIRED>
<!-- entities for direct conversion to LaTeX -->
<!ENTITY TeX "\TeX{}">
<!ENTITY LaTeX "\LaTeX{}">
<!ENTITY LyX "\LyX{}">
<!ENTITY ampers "\&#38;#38;">
<!ENTITY checkmark "\checkmark{}">
<!ENTITY boxmark "\boxmark{}">
<!ENTITY checkmarkneg "\checkmarkneg{}">
<!ENTITY circmark "\circmark{}">
<!ENTITY dollar "\$">
<!-- entities for direct conversion to XHTML/HTML5 -->
<!-- uncomment this block and comment out the other one if you're NOT using LaTeX
<!ENTITY TeX "TeX">
<!ENTITY LaTeX "LaTeX">
<!ENTITY LyX "LyX">
<!ENTITY ampers "&#38;#38;">
<!ENTITY checkmark "☑">
<!ENTITY boxmark "□">
<!ENTITY checkmarkneg "✗">
<!ENTITY circmark "◯">
<!ENTITY dollar "$"> 
-->
]>
<article>
  <?LaTeX \hyphenation{navi-ga-tion helico-pter graphi-cal}?>
  <info>
    <title>Software we have lost</title>
    <subtitle>the mortar that held the bricks together</subtitle>
    <author>
      <personname>
	<firstname>Peter</firstname>
	<surname>Flynn</surname>
      </personname>
      <affiliation>
	<org>
	  <orgname>Silmaril Consultants</orgname>
	  <orgdiv>Textual Therapy Division</orgdiv>
	  <address>Cork, Ireland</address>
	  <email>peter@silmaril.ie</email>
	  <uri>xml.silmaril.ie</uri>
	</org>
      </affiliation>
    </author>
    <confgroup>
      <conftitle>MarkupUK</conftitle>
      <confdates YYYY-MM-DD="2019-06-08">8–9 June 2019</confdates>
      <address>
	<otheraddr>King’s College</otheraddr>
	<street>Bush House</street>
	<city>London</city>
	<country>England</country>
      </address>
    </confgroup>
    <abstract>
      <para>Since the first days of <acronym>SGML</acronym>, there has
	been a variety of software to parse, validate, analyse,
	format, store, search, and extract the information.  Some of
	this was what we now call <phrase>Open Source</phrase>,
	particularly the smaller utilities, but the majority of
	applications were conventional commercial offerings.</para>
      <para>In the course of time, many of these have become
	unavailable, for assorted reasons, with the result is that
	some very useful systems have been lost, and replacements are
	not always as effective.</para>
      <para>This research attempts to catalogue and analyse a
	collection of <acronym>XML</acronym> and
	<acronym>SGML</acronym> software that is either off the
	market, or only available within a different product, and thus
	not accessible to users.  The objective is to see if there are
	still ways to <phrase>shorten the distance between the
	  bricks</phrase> that are not otherwise provided for.</para>
    </abstract>
    <revhistory>
      <revision>
	<date YYYY-MM-DD="2019-05-05">5 May 2019</date>
	<revremark>Started writing</revremark>
      </revision>
      <revision>
	<date YYYY-MM-DD="2019-05-09">9 May 2019</date>
	<revremark>Added software</revremark>
      </revision>
      <revision>
	<date YYYY-MM-DD="2019-05-17">17 May 2019</date>
	<revremark>Started testing</revremark>
      </revision>
      <revision>
	<date YYYY-MM-DD="2019-05-29">29 May 2019</date>
	<revremark>Finished testing</revremark>
      </revision>
    </revhistory>
  </info>
  <acknowledgements>
    <para>I am grateful to the numerous people in University College
      Cork and elsewhere who stepped up with offers of Windows and
      other installer CDs when my carefully-preserved originals went
      missing, including (alphabetically) John Barrett, Roy Cummins,
      Stephen Dineen, AV Drepe, Martin Fleming, Nick Hogan, Sinead
      Horgan, Steve King, Margaret Lantry, Piaras MacEinri, Neil Nash,
      John O’Connell, Michael O’Halloran, Billy O’Rourke, Bereniece
      Riedewald, Joel Walmsley, and Frank van Pelt. Thank you also to
      the <acronym>SGML</acronym>-era veterans who prompted me with
      the names, details, or disks of long-forgotten products,
      especially Debbie Lapeyre, Lauren Wood, and Michael
      Sperberg-McQueen</para>
  </acknowledgements>
  <sect1 xml:id="bg">
    <title>Background</title>
    <para>Before we had <acronym>XML</acronym>, we had
      <acronym>SGML</acronym>, which is the <acronym>ISO</acronym>
      standard <biblioref linkend="sgml"/> on which
      <acronym>XML</acronym> is based. By default,
      <acronym>SGML</acronym> is pointy-bracket markup like
      <acronym>XML</acronym>…but in <acronym>SGML</acronym> almost
      everything can be redefined, including the markup characters
      themselves, and there are numerous options for additional
      features and for abbreviations and markup shortcuts to minimise
      typing. Any changes to syntax or to the configuration value
      limits have to be made in a Declaration file, and a
      <acronym>DTD</acronym> is compulsory on every document.</para>
    <para>Notice the words <phrase>to minimise typing</phrase>. In the
      beginning, there was no software with an editing interface that
      could use the <acronym>DTD</acronym> to provide a contextual
      menu of available element types; and the idea that the markup
      would be hidden from the user was counterintuitive — if you
      couldn’t see the tags, how could you know what was
      marked?</para>
    <para>In these early stages, therefore, markup was applied by
      typing it in a plaintext editor, so <emphasis>the</emphasis>
      essential piece of software to begin with was the parser, not
      the editor, so that you could check that you hadn’t got
      something wrong. The term <wordasword>parsing</wordasword> was
      often used to mean
      <phrase>parsing-and-validating</phrase>; <footnote>
	<para>In fact, in the authors’ description of the
	  <productname>Amsterdam SGML Parser</productname>
	  <biblioref linkend="asp"/>, the only instances of the term
	  <wordasword>validation</wordasword> are in the formal
	  references to <phrase>validation
	    <emphasis>services</emphasis></phrase> in the
	  <acronym>SGML</acronym> standard itself.</para>
      </footnote> as there was no concept of well-formed <phrase>tag
	validity</phrase> in the sense introduced with
      <acronym>XML</acronym>. There were many early parsers; among the
      most significant were:</para>
    <itemizedlist xml:id="parserlist" spacing="compact">
      <listitem>
	<para><productname>ARC SGML</productname> (Almaden Research
	  Center) originally by Charles Goldfarb; later developed by
	  James Clark into <productname>sgmls</productname> (see
	  below)</para>
      </listitem>
      <listitem>
	<para><productname>ASP SGML</productname> (Amsterdam
	  <acronym>SGML</acronym> Parser), still available <biblioref
	    linkend="asp"/></para> 
      </listitem>
      <listitem>
	<para><productname>Exoterica</productname> by Sam Wilmott
	  (later included in
	  <productname>Omnimark</productname>)</para>
      </listitem>
      <listitem>
	<para>the parser in
	  <productname>Framemaker+SGML</productname>
	  by Lynn Price</para>
      </listitem>
      <listitem>
	<para>a parser for Boeing (internal only) by Greg O’Connell
	  and Debbie Lapeyre</para>
      </listitem>
      <listitem>
	<para><productname>Mark-It!</productname> by Jean-Pierre
	  Gaspard</para>
      </listitem>
      <!--
      <listitem>
	<para>the parser in SoftQuad’s
	  <productname>Author/Editor</productname>  by Peter
	  Sharpe</para>
      </listitem>
      -->
      <listitem>
	<para><productname>sgmls</productname> by James Clark, the
	  only one still in widespread use; redeveloped as
	  <productname>nsgmls</productname> for
	  <productname>SP</productname>, and now as
	  <productname>onsgmls</productname> to handle
	  <acronym>XML</acronym> for <productname>OpenSP</productname></para>
      </listitem>
    </itemizedlist>
    <para>Other software developed rapidly, spurred partly
      by the adoption of <acronym>SGML</acronym> for some military
      documentation in the <acronym>US</acronym> and elsewhere, and
      partly by its growing use in publishing, research, and
      academia. Editing software included:</para>
    <itemizedlist xml:id="editorlist" spacing="compact">
      <listitem>
	<para>Arbortext <productname>ADEPT</productname> (through
	  several name changes (eg Epic), now <productname>PTC Arbortext
	    Editor</productname>)</para>
      </listitem>
      <listitem>
	<para>SoftQuad <productname>Author/Editor</productname> and
	  the editors based on it, <productname>HoTMetaL</productname>
	  (for HTML) and later, <productname>XMetaL</productname> (for
	  XML)</para>
      </listitem>
      <listitem>
	<para>STiLO <productname>Document Generator</productname>,
	  with <productname>Arbortext</productname> one of the few to
	  handle mathematics in a general-purpose
	  <acronym>SGML</acronym> editor</para>
      </listitem>
      <listitem>
	<para><productname>Emacs</productname> with
	  <productname>psgml-mode</productname></para>
      </listitem>
      <listitem>
	<para><productname>epcedit</productname>, a free SGML and XML
	  editor from tkSGML</para>
      </listitem>
      <listitem>
	<para>the <productname>Euromath Editor</productname>, an EU
	  project built on the GriF editor<footnote>
	    <para>The editor is reputedly being
	  resuscitated and rebuilt using <acronym>INRIA</acronym>’s
	  <productname>Thot</productname> structured editor.</para>
	  </footnote></para>
      </listitem>
      <listitem>
	<para>Siemens Nixdorf
	  <productname>InContext</productname></para>
      </listitem>
      <listitem>
	<para>Citec <productname>MultiDoc</productname> Translating
	  Editor</para>
      </listitem>
      <listitem>
	<para>Microstar <productname>Near&ampers;Far
	    Author for Word</productname> and
	    <productname>Near&ampers;Far Designer</productname>, a graphical
	  <acronym>DTD</acronym> editor</para>
      </listitem>
      <listitem>
	<para>GriF <productname>SGML Editor</productname></para>
      </listitem>
      <listitem>
	<para>Richard Light’s <productname>SGML Tagger</productname>
	  (OUP), a memory-resident monitor for <acronym>MS-DOS</acronym> editors.</para>
      </listitem>
      <listitem>
	<para>Corel <productname>WordPerfect</productname> had a
	  built-in <acronym>SGML</acronym> editor</para>
      </listitem>
      <listitem>
	<para>Sema <productname>Write-It!</productname> (using
	  <productname>Mark-It!</productname> as the parser)</para>
      </listitem>
    </itemizedlist>
    <para>Documents also need processing in some way: adding to a
      database, putting on the Web, mining it for data, or converting
      it for a formatting system for publishing. Conversion or processing
      (transformation) systems included:</para>
    <itemizedlist xml:id="processorlist" spacing="compact">
      <listitem>
	<para><acronym>AIS</acronym> Software
	  <productname>Balise</productname></para>
      </listitem>
      <listitem>
	<para><acronym>DFN</acronym> <productname>DAPHNE</productname>
	  (VMS only; converted to &TeX;)</para>
      </listitem>
      <listitem>
	<para><acronym>EBT</acronym> (later Inso)
	  <productname>DynaText</productname> trainable converter from
	  <productname>Word</productname> to
	  <acronym>SGML</acronym></para>
      </listitem>
      <listitem>
	<para>James Clark’s <productname>Jade</productname> (using
	  <acronym>DSSSL</acronym>) can convert to &TeX; and other
	  formats</para> 
      </listitem>
      <listitem>
	<para>Exoterica <productname>Omnimark</productname>
	  (<acronym>XTRAN</acronym>)</para>
      </listitem>
      <listitem>
	<para>Microsoft <productname>SGML Author for
	    Word</productname>, despite its name, this was
	  <emphasis>not</emphasis> an editor, but a converter into and
	  out of <productname>Word</productname></para>
      </listitem>
    </itemizedlist>
    <para>There were several standalone viewers, especially for
      vertical-market applications, but few general-purpose browsers.
      As with editors, some used <acronym>SGML</acronym>-syntax
      stylesheets to format the display; others used proprietary
      stylesheet syntax. Formatting systems for printed output
      typically produced <productname>Postscript</productname>
      (pre-<acronym>PDF</acronym> days). Some handled
      <acronym>SGML</acronym> input direct, others via an established
      conversion route; output was formatted using &TeX; or a
      proprietary typesetting engine.</para>
    <itemizedlist xml:id="formatterlist" spacing="compact">
      <listitem>
	<para>Advent <productname>3B2</productname> typesetter</para>
      </listitem>
      <listitem>
	<para>EBT <productname>DynaWeb</productname> NT server for
	  documents converted with <productname>DynaText</productname></para>
      </listitem>
      <listitem>
	<para>Adobe <productname>Framemaker+SGML</productname>
	  typesetter (FTC’s
	  original had no <acronym>SGML</acronym> support)</para>
      </listitem>
      <listitem>
	<para>&LaTeX;, typesetter, usually via transformation through
	  <productname>Omnimark</productname>, <productname>Balise</productname>,
	  <productname>Jade</productname>, or similar</para>
      </listitem>
      <listitem>
	<para>Citec <productname>MultiDoc Pro Publisher</productname> standalone
	  browser</para>
      </listitem>
      <listitem>
	<para><productname>Panorama Viewer</productname>, an
	  <acronym>SGML</acronym> plugin for the
	  <productname>Mosaic</productname> and
	  <productname>Netscape</productname> browsers; also the
	  standalone <productname>Panorama
	    Publisher</productname></para>
      </listitem>
      <listitem>
	<para>Arbortext <productname>Publisher</productname> typesetter</para>
      </listitem>
    </itemizedlist>
    <para>There was far more software available which is outside the
      scope of this report — some of it is now either uncompilable or
      uninstallable, or was in any case incomplete or experimental at
      the time. A significant amount was normal commercial software
      which has suffered the conventional fate of being superseded,
      falling out of use, or being abandoned when the company failed
      or was taken over. There are extensive lists of both free and
      commercial applications in <link xlink:href="http://xml.coverpages.org/index.html">Robin
	Cover’s <acronym>SGML</acronym>/<acronym>XML</acronym> Web
	Pages</link>, and some of the <acronym>SGML</acronym>
      Conference <acronym>CD</acronym>s have a considerable amount of
      freely-distributable and commercial-sample software in
      subdirectories..</para>
    <para>Other categories not covered here include design tools,
      search engines, and databases. The only three of these of which
      this author has direct experience (noted below) were Microstar’s
      <productname>Near&ampers;Far Designer</productname>, Tim Bray’s
      <productname>PAT</productname> search engine in <xref
	linkend="pat"/>, and the <productname>SGML DARC</productname>
      document management database in <xref linkend="darc"/>.</para>
  </sect1>
  <sect1 xml:id="sw">
    <title>Software</title>
    <para>The sections below refer to those programs and systems which
      were <emphasis>either</emphasis> installed and [re-]tested for
      this paper <emphasis>or</emphasis> were tested and documented in
      the author’s <biblioref xrefstyle="shorttitle" linkend="sgmltools"/> <biblioref linkend="sgmltools"/>. The
      following symbols are used:</para>
    <itemizedlist>
      <listitem remap="☑">
	<para>a checkmark beside an item denotes that it installs and
	  executes correctly</para>
      </listitem>
      <listitem remap="✗">
	<para>an X denotes that the software exists but cannot be
	  compiled or installed correctly, so testing it was not
	  possible</para>
      </listitem>
      <listitem remap="◯">
	<para>a circle denotes that the software could be installed
	  but either would not execute, or executed but with
	  unresolvable errors</para>
      </listitem>
      <listitem remap="□">
	<para>an empty box denotes the software is no longer
	  available</para>
      </listitem>
    </itemizedlist>
    <para>The platform used for testing Windows and <acronym>MS-DOS</acronym> software was
      Windows <acronym>XP</acronym> <acronym>SP2</acronym> running on a Dell Optiplex 745.<footnote>
	<para>An attempt was made to use Windows 95 but this satisfied
	  the requirements for only the oldest programs.</para>
      </footnote> The objective was to emulate as reasonably as
      possible the office environment
      <foreignphrase>circa</foreignphrase> 1998–2002. A modern Linux
      distribution (Mint 19) was used for the few UNIX or GNU/Linux
      utilities. The procedure for testing was:</para>
    <orderedlist>
      <listitem>
	<para>Install the software from original media where possible,
	  or from zip archives from network repositories</para>
      </listitem>
      <listitem>
	<para>Run the relevant program[s] from the Start menu or from
	  an installed icon (a few command-line procedures were run
	  from the Windows Command terminal)</para>
      </listitem>
      <listitem>
	<para>Open or otherwise invoke the sample SGML document (see
	  <xref linkend="sampledoc"/>), performing any necessary
	  prerequisites such as making the <acronym>DTD</acronym> or
	  <acronym>SGML</acronym> Declaration available to the program</para>
      </listitem>
      <listitem>
	<para>Exercise the features or functions of the
	  software to check they operate correctly (eg
	  <command>Insert Element</command>, <command>Edit
	    Attribute</command>, <command>Validate</command>, etc)</para>
      </listitem>
      <listitem>
	<para>Record details of success or failure</para>
      </listitem>
    </orderedlist>
    <sect2 xml:id="parsers">
      <title>Parsers and validators</title>
      <para>Three of the products listed in <xref
	  linkend="parserlist"/> were tested.</para>
      <sect3 xml:id="arcsgml">
	<title><productname>ARC SGML</productname>  &circmark;</title>
	<para>This software was installed from the copy distributed on
	  the <acronym>SGML’97</acronym> <acronym>CD-ROM</acronym>.
	  However, the <filename>INSTALL</filename> and
	  <filename>readme</filename> files referenced binaries that
	  were not included, and attempting to parse any of the test
	  suite resulted in references to components that were not
	  recognised. However, the <filename>vm2</filename> program
	  did appear to execute, but failed to parse the sample file,
	  returning error messages related to capacities, and it was
	  not clear how the values from the <acronym>SGML</acronym>
	  Declaration could be implemented within the time
	  available.</para>
      </sect3>
      <sect3 xml:id="aspsgml">
	<title><productname>ASP
	    SGML</productname>  &checkmarkneg;</title>
	<para>Several attempts were made to compile this parser from
	  the source code available in <filename>Sgml.tar.z</filename>
	  but the changes in the C libraries over the years mean that
	  significantly more work is needed to recode those parts
	  which currently generate errors. While this would be an
	  interesting excursion for a student coding project, there is
	  probably little to be gained by resuscitating the software
	  for production use when <productname>onsgmls</productname>
	  fulfils the same function.</para>
      </sect3>
      <sect3>
	<title><productname>sgmls</productname>  &checkmark;</title>
	<para>Derived from <productname>ARC SGML</productname>, the
	  parser was rewritten as part of the
	  <productname>Jade</productname> <acronym>DSSSL</acronym>
	  processor (now <productname>OpenJade</productname>). This is
	  a standalone (commandline) parser with options (among
	  others) for:</para>
	<itemizedlist spacing="compact">
	  <listitem>
	    <para>suppressing the default <acronym>ESIS</acronym>
	      output (a markup-and-data stream) when just a validity
	      check is required</para>
	  </listitem>
	  <listitem>
	    <para>limiting the number of error messages</para>
	  </listitem>
	  <listitem>
	    <para>switching to <acronym>XML</acronym> mode
	      (<productname>onsgmls</productname> only)</para>
	  </listitem>
	  <listitem>
	    <para>specifying the <acronym>SGML</acronym> Declaration
	      to use</para>
	  </listitem>
	</itemizedlist>
	<para><productname>sgmls</productname> is also used by the
	  <productname>sgmlnorm</productname> normalizer to expand
	  <acronym>SGML</acronym> shortcuts; and by the
	  <productname>Emacs</productname>/<productname>psgml</productname> 
	  editor for validation. The 32–bit Windows binaries used in
	  this test were installed from the <acronym>SGML’97</acronym>
	  <acronym>CD-ROM</acronym>.</para>
	<programlisting>
C:\SGMLS\> sgmls -s sgml.dec recipe.sgml
	</programlisting>
	<para>In the case of this, and most command-line parsers, a
	  null return means no errors were found in the
	  <acronym>DTD</acronym> or document.</para>
	<para>The companion <productname>sgmlnorm</productname>
	  utility was also exercised: the normalization fills in all
	  the missing parts of the <acronym>SGML</acronym> document by
	  applying the rules from the <acronym>SGML</acronym>
	  Declaration on what end-tags may be omitted and if
	  attributes may be minimized (and much else). In this case
	  the following output was obtained:</para>
	<programlisting><![CDATA[
C:\Documents\> sgmlnorm sgml.dec recipe.sgml
<RECIPE>
<TITLE>Chocolate fudge</TITLE>
<COMMENT>My mother's recipe</COMMENT>
<INGREDIENTS>
<INGREDIENT QUANT="1" UNITS="LB">sugar
    </INGREDIENT>
<INGREDIENT QUANT="4" UNITS="OZ">chocolate
    </INGREDIENT>
<INGREDIENT QUANT="?" UNITS="PT">cream
    </INGREDIENT>
<INGREDIENT QUANT="1" UNITS="OZ">butter
  </INGREDIENT>
</INGREDIENTS>
<METHOD>
<LIST>
<ITEM>Mix the ingredients in a pan
      </ITEM>
<ITEM>Heat to 234?F, stirring constantly
      </ITEM>
<ITEM>Pour into greased flat tin
      </ITEM>
<ITEM>Allow to cool before cutting
    </ITEM>
</LIST>
</METHOD>
<SOURCE>Adapted from the Good Housekeepings cookbook</SOURCE>
</RECIPE>
	  ]]></programlisting>
	<para>Note that by default, <acronym>SGML</acronym> is
	  case-<emphasis>in</emphasis>sensitive, and that the
	  pretty-print indentation of the original document means that
	  normalizing the omitted end-tags has introduced a
	  white-space node into the character data content of the
	  <tag>ingredient</tag> and <tag>item</tag> elements.</para>
      </sect3>
    </sect2>
    <sect2>
      <title>Editors</title>
      <para>Of the editors in <xref linkend="editorlist"/>,
	<productname>Document Generator</productname>,
	<productname>SGML Tagger</productname>, <productname>Euromath
	  Editor</productname>, and
	<productname>Write-It!</productname> were not reviewed either
	due to lack of software or incompatibilities.</para>
      <sect3 xml:id="adept">
	<title>ADEPT  &checkmarkneg;</title>
	<para>The Arbortext editor is perhaps the best-known
	  industrial <acronym>SGML</acronym> and
	  <acronym>XML</acronym> editor. It was (is) a very large
	  suite, including the <productname>Document
	    Architect</productname> program for compiling
	  <acronym>DTD</acronym>s and <acronym>FOSI
	  </acronym>stylesheets, and
	  <productname>Publisher</productname> which output
	  typeset-quality formatting (printing from the editor itself
	  was more office-quality). Setting up the suite takes a long
	  time, especially if many custom <acronym>DTD</acronym>s and
	  stylesheets need to be installed: this is not a simple
	  editor but a fairly complete document production system —
	  the <productname>Author/Editor</productname> and
	  <productname>Panorama Publisher</productname> setup had
	  similar capabilities, but the editor could also be installed
	  and running in a few minutes, which is not the case with
	  <productname>ADEPT</productname>. It was also
	  <emphasis>expensive</emphasis>: in 1992, the present author
	  was quoted &dollar;5,000 per seat and no discounts.</para>
	<figure floatstyle="h" xml:id="adepted">
	  <title><productname>ADEPT</productname> showing the Insert
	    Element dialog (left); and editing mathematics
	    (right)</title>
	  <mediaobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/arbortext/adedit.JPG"/>
	    </imageobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/arbortext/admath.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>A strong feature of<productname>ADEPT</productname> was
	  mathematics (in an earlier incarnation, Arbortext also sold a
	  commercial version of &TeX;, and the &TeX; engine remained
	  inside their products for many years). The graphical
	  interface to mathematical editing (see <xref
	    linkend="adepted"/>) was a <foreignphrase>de
	    facto</foreignphrase> industry standard which was only
	  challenged by &LyX; and more recently
	  <productname>Word</productname>’s <productname>Equation
	    Editor</productname>.</para>
	<para>As with <productname>Author/Editor</productname> and
	  <productname>RulesBuilder</productname>, the principle was
	  to separate the business of editing — the job of
	  professional technical writers — from the business of
	  maintaining the <acronym>DTD</acronym>s, many of which were
	  from industrial vertical markets and subject to strict data
	  controls over who could change what and when and how. One
	  interesting approach, not seen in any other product of the
	  era, was that after a <acronym>DTD</acronym> was
	  successfully compiled for the first time, the system would
	  ask for the element type names used for:</para>
	<itemizedlist spacing="compact">
	  <listitem>
	    <para>the document title, title block, and title
	      page</para>
	  </listitem>
	  <listitem>
	    <para>normal paragraphs</para>
	  </listitem>
	  <listitem>
	    <para>graphics, and attribute names for assorted graphical
	      manipulation features</para>
	  </listitem>
	  <listitem>
	    <para>divisions (chapter, section, subsection, etc)</para>
	  </listitem>
	  <listitem>
	    <para>lists (numbered/bulleted/definition)</para>
	  </listitem>
	  <listitem>
	    <para>figure blocks and page breaks</para>
	  </listitem>
	</itemizedlist>
	<para>This was then used to construct an initial
	  <acronym>FOSI</acronym> stylesheet so that when a new
	  instance of the document type was created or opened, it
	  would at least be styled with the basic structure rather
	  than presented as an amorphous slab of markup and
	  text. The stylesheet could then be edited to refine the
	  formatting (see <xref linkend="arched"/>): the styling
	  interface was comprehensive but required substantial
	  training to use.</para>
	<figure floatstyle="h" xml:id="arched">
	  <title><productname>Document Architect</productname>
	  creating styles for a document type</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/arbortext/fosiedit.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
      </sect3>
      <sect3 xml:id="ae">
	<title><productname>Author/Editor</productname>  &checkmark;</title>
	<subtitle><productname>RulesBuilder</productname>  &circmark;</subtitle>
	<para>This was one of the most widely-used
	  editors: easy to use and fuss-free in operation. Its
	interface later became familiar to a much wider audience as it
	  formed the basis for the <acronym>HTML</acronym> editor
	  <productname>HoTMetaL</productname> and the
	  <acronym>XML</acronym> editor <productname>XMetaL</productname>.
	  Installation was from <acronym>CD</acronym>.</para>
	<para><productname>Author/Editor</productname> would
	  immediately open an arbitrary <acronym>SGML</acronym> file,
	  but would only enter full synchronous typographic mode if
	  the <acronym>DTD</acronym> was known and precompiled. For
	  documents using previously unencountered document types, it
	  acted as a plaintext editor until provided with a compiled
	  <acronym>DTD</acronym>.</para>
	<figure floatstyle="h" xml:id="aeedit">
	  <title><productname>Author/Editor</productname> editing a
	    <productname>DocBook</productname> document (left);
	    <productname>RulesBuilder</productname> compiling a
	    <acronym>DTD</acronym> (right)</title>
	  <mediaobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/ae/ae-edit.JPG"/>
	    </imageobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/ae/rbcomp.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>For full use, the separate
	  <productname>RulesBuilder</productname> program was needed.
	  The assumption was that the <acronym>DTD</acronym> was a
	  corporate asset that would not be available to an end-user,
	  only to an administrator; and even outside that type of
	  managed framework, it would be undesirable for arbitrary
	  users to be able to modify what should be a stable
	  <acronym>DTD</acronym>. The administrator would compile the
	  <acronym>DTD</acronym> to a proprietary
	  <filename>.rb</filename> file which
	  <emphasis>could</emphasis> be given to an end-user.</para>
	<para></para>
      </sect3>
      <sect3 xml:id="emacspsgml">
	<title><productname>Emacs</productname> +
	  <productname>psgml</productname>  &checkmark;</title>
	<para><acronym>GNU</acronym> <productname>Emacs</productname>
	  is a plain-text editor and work environment by Richard
	  Stallman, with a macro and programming facility using a
	  dialect of Lisp, used extensively for the creation of add-on
	  packages. <productname>Emacs</productname> 20.7 for Windows
	  95 and NT was installed from the <link xlink:href="ftp://ftp.gnu.org/old-gnu/emacs/windows/20.7/"><acronym>GNU</acronym>
	  archive</link>.</para>
	<para>The <productname>psgml-mode</productname> package by
	  Lennart Staflin is an <productname>Emacs</productname> major
	  mode for <acronym>SGML</acronym> and <acronym>XML</acronym>
	  which parses the <acronym>DTD</acronym> (a requirement in
	  <acronym>SGML</acronym>). At the time it provided the only
	  free and unencumbered fully-featured <acronym>SGML</acronym>
	  editor.<footnote>
	    <para>Arguably, it still does, and for
	      <acronym>XML</acronym> as well.</para>
	  </footnote> Installation of various versions of
	  <productname>psgml</productname> were tested to find one
	  which was compatible with the 20.7 version of
	  <productname>Emacs</productname>, as at that time there was
	  no package library synchronisation. Version 2.12 worked with
	  the removal of the compiled form of the
	  <filename>psgml-other.elc</filename> file, which was the
	  only code mismatch. Installation would normally be via the
	  <productname>Emacs</productname> package system,<footnote>
	    <para>The package has recently and inexplicably been
	      withdrawn from the current repositories.</para>
	  </footnote> or by using the <filename>Makefile</filename> in
	  a downloaded <productname>psgml</productname> distribution,
	  or (in the test case under Windows) by copying the files to
	  a suitable directory manually.</para>
	<figure floatstyle="h" xml:id="emacsdoc">
	  <title><productname>Emacs</productname> with the sample
	    document before and after normalization</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/emacs/emacsfile.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>A setting in the user’s
	  <filename>.emacs</filename> configuration file can 
	  make <productname>Emacs</productname> invoke
	  <productname>psgml-mode</productname> automatically for
	  files ending in <filename>.sgml</filename> or other
	  extensions. The <acronym>DTD</acronym> is tokenised and the
	  result used to guide the user’s selection of element types
	  via a menu or with <acronym>TAB</acronym> completion, and
	  the use of attributes via a subsidiary window. Manipulation
	  of markup in context as with any other syntax-directed
	  editor is done from the menus or with keystroke
	  abbreviations.</para>
      </sect3>
      <sect3 xml:id="epcedit">
	<title><productname>epcedit</productname>  &checkmark;</title>
	<para>This is an <acronym>SGML</acronym> (and later,
	  <acronym>XML</acronym>) editor from tkSGML by Heinz Detlev
	  Koch and Roman Halstenberg. While it is no longer under
	  development, it can still be downloaded but it is a 32–bit
	  system only and requires a licence key. The program uses
	  the Tcl/tk language (v8.3) which is included in the
	  distribution. The sample document was opened without
	  problems (see <xref linkend="epcboth"/>)</para>
	<figure floatstyle="h" xml:id="epcboth">
	  <title><productname>epcedit</productname> with the sample
	    document and with the sample stylesheet</title>
	  <mediaobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/epcedit/epcedit.JPG"/>
	    </imageobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/epcedit/epcedit-style.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>There is a built-in stylesheet system which is
	  reasonably comprehensive except that it does not allow for
	  the formatting of generated content, and attribute values
	  cannot be included in generated content. The result of
	  styling the sample document is also shown on in <xref linkend="epcboth"/></para>
      </sect3>
      <sect3 xml:id="incon">
	<title><productname>InContext</productname>  &checkmark;</title>
	<para><productname>InContext</productname> is one of a small
	  number of <acronym>SGML</acronym> editors more suited to
	  <wordasword>data</wordasword> applications, with the
	  interface using boxes for each element (see <xref
	    linkend="incondoc"/>). Navigation is provided in a
	  side-panel, using a 3D arrangement of stacked, nested
	  buttons to represent the document tree. This is a good way
	  to display documents where <wordasword>data</wordasword>
	  elements occur frequently and text is minimal, but its
	  usability as an editor for writing continuous text is
	  severely limited. As the only available disk was an
	  evaluation copy, it was not possible to open the sample
	  document, only the samples provided by the vendor. Microsoft
	  Office (specifically, Excel, to handle tables) must be
	  installed before installing
	  <productname>InContext</productname>.</para>
	<figure floatstyle="h" xml:id="incondoc">
	  <title><productname>InContext</productname> editing a
	    <acronym>CALS</acronym> manual</title>
	  <mediaobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/incontext/calsmanual.JPG"/>
	    </imageobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/incontext/calsmixedcontent.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>Access to editing in Mixed Content
	  <emphasis>is</emphasis> possible, despite the box design:
	  selecting an element type like <tag>para</tag> lets you
	  split the content into nodes, and empty elements are shown
	  as symbols.</para>
	<para>Other software with a related interface includes
	  Microsoft Office <productname>InfoPath</productname> (2003),
	  and the Citec’s <productname>MultiDoc Pro Translating
	    Editor</productname></para>
      </sect3>
      <sect3 xml:id="mdpte">
	<title><productname>MultiDoc Pro Translating
	    Editor</productname>  &checkmark;</title>
	<para>This is a companion program to the <productname>MultiDoc
	    Pro Browser</productname> and
	  <productname>Publisher</productname>, sharing the same
	  interface and the same style files. The objective is to let
	  a translator fill in a parallel document structure with the
	  translated text (<wordasword>target</wordasword>) occupying
	  the same element types in element content as the original
	  document (<wordasword>source</wordasword>).</para>
	<para>Installation is from <acronym>CD</acronym>, with a
	  choice of this program, the browser/publisher, and some
	  ancillary programs. Opening the sample recipe document meant
	  using the normalized version (created with
	  <productname>sgmlnorm</productname> or
	  <productname>epcedit</productname>) because
	  <acronym>MDP</acronym> does not handle files using missing
	  end-tags or attribute minimization.</para>
	<figure floatstyle="h" xml:id="mdptrans">
	  <title><productname>MultiDoc Pro Translating Editor</productname> editing a
	    recipe (original formatted above; translation in boxes below)</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/mdp/mdptrans.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>The similarity between the target interface and the one
	  used by <productname>InContext</productname> is immediately
	  apparent in <xref linkend="mdptrans"/>. The advantage of
	  using their existing browser and stylesheet apparatus to
	  present the source document presumably meant that adding the
	  parallel hierarchy below was unproblematic, except that in
	  Mixed Content, any subelements may be in a different order
	  in the target because different languages have different
	  ways of expressing things.</para>
      </sect3>
      <sect3 xml:id="nf">
	<title><productname>Near&ampers;Far Author for
	    Word</productname>  &checkmarkneg;</title> 
	<para>From the same stable as <productname>Near&ampers;Far
	    Designer</productname> (see <xref linkend="nfd"/>), this
	  is not a standalone editor but an add-on for Microsoft
	  <productname>Word</productname>. It adds
	  <wordasword>Import</wordasword> and
	  <wordasword>Create</wordasword> menu entries for the
	  <productname>Word</productname> interface which parallel the
	  <wordasword>Open</wordasword> and
	  <wordasword>New</wordasword> operations. It uses
	  whatever <acronym>DTD</acronym> you select, without the need
	  to precompile it, and it uses the same graphical navigation
	  as the companion <productname>Designer</productname>
	  program (see <xref linkend="nfaedit"/>).</para>
	<figure floatstyle="h" xml:id="nfaedit">
	  <title><productname>Near&ampers;Far Author for
	      Word</productname> editing a
	      <productname>Word</productname> document with named styles</title> 
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/nf/nfaedit.JPG" scalefit="1"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>However, as with every other markup tool that interfaces
	  with Microsoft <productname>Word</productname>, there is a
	  prerequirement that the <productname>Word</productname>
	  document uses exclusively Named Styles, as this is the only
	  way in which element type names can be bound to recognised
	  spans of text in the document.</para>
	<para>As can be seen from the screenshot, the
	  floating window with the document structure from the
	  <acronym>DTD</acronym> can be used to guide formation of the
	  document, with the selected element type mapping to a named
	  style, which in turn provides the formatting…which can of
	  course be changed by the author without affecting the
	  markup, although the formatting toolbar is usually disabled
	  to prevent meddling.</para>
	<para>An export function saves the document as
	  <acronym>SGML</acronym>. In this way a circular conversion
	  can be obtained, much like Microsoft’s <productname>SGML
	  Author for Word</productname> but with the benefit of
	  executing from within the editor.</para>
      </sect3>
      <sect3 xml:id="grif">
	<title>GriF <productname>SGML Editor</productname>  &checkmarkneg;</title>
	<para>The GriF <productname>SGML Editor</productname> has one
	  of the least complex interfaces to editing
	  <acronym>SGML</acronym>. It provides a synchronous
	  typographic screen in the manner of a wordprocessor, with
	  conventional file management and editing controls. In
	  addition to being popular in business and publishing
	  applications, GriF was the interface used in the Euromath
	  editor.</para>
	<para>As with most editors in this class, compiling the
	  <acronym>DTD</acronym> and creating a stylesheet are tasks
	  administered separately from the editor, using the
	  <productname>Application Builder</productname> program.
	  However, (so far as this author is aware) uniquely to GriF,
	  the screen controls still allow the user to impose local
	  (non-element-based) styles on a document. This approach
	  allows almost complete word-processor-style control with
	  independence from the markup: a stylesheet may cause a
	  particular element to default to bold type, for example, but
	  you can override that manually by using a different font,
	  for example, or changing the size, on an entirely
	  independent basis, without affecting the
	  <emphasis>element</emphasis> markup in any way. The effect
	  is achieved internally by storing Processing Instructions to
	  record the <foreignphrase>ad hoc</foreignphrase> styles
	  within the markup, so that these operator-controlled styles
	  are not tied to an element.</para>
	<figure xml:id="grifed" floatstyle="h">
	  <title>GriF’s <productname>SGML Editor</productname>
	    showing text-entry location for the title of section 3.1.1</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/grif/grifedit.JPG" scalefit="1"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>By default, locations on the screen where character data
	  content is required are identified by gray squares, so text
	  entry for very prescriptive <acronym>DTD</acronym>s can be
	  made almost as simple as a form-fill application (many other
	  editors also do this but require scripting).</para>
	<para>GriF was an early implementer of the feature during text
	  entry that the Enter key performs an element split; that is,
	  it creates a new instance of the current element in element
	  content, if the DTD permits this — for example, pressing
	  Enter at the end of a <tag>para</tag> would create another
	  <tag>para</tag>. If the current content model is at an end
	  (all required elements are present, and no further optional
	  elements are wanted), the TAB key moves to the next location
	  in the document model where input is possible.</para>
      </sect3>
      <sect3>
	<title>WordPerfect+SGML  &checkmark;</title>
	<para><productname>WordPerfect</productname> was for many
	  years <emphasis>the</emphasis> dominant wordprocessor,
	  especially in the <acronym>MS-DOS</acronym> period.
	  Reputedly even <acronym>WP</acronym>’s own engineers
	  regarded the character-cell version as the
	  <wordasword>real</wordasword>
	  <productname>WordPerfect</productname>, and superior to the
	  <acronym>GUI</acronym> version. However, embedded inside the
	  Windows version (8) was a real, fully-fledged
	  <acronym>SGML</acronym> editor and stylesheet system,
	  providing synchronous typographic editing of
	  <acronym>SGML</acronym> documents for the price of a
	  wordprocessor, well below the entry-point for the larger
	  <acronym>SGML</acronym>-only editors.</para>
	<figure floatstyle="h" xml:id="wpprep">
	  <title><productname>WordPerfect</productname> compiling a
	    <acronym>DTD</acronym> and creating a stylesheet</title>
	  <mediaobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/wp/wpcomp.JPG"/>
	    </imageobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/wp/wpstyle.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>Compilation requires choosing the correct character map
	  files for whatever is expressed in the
	  <acronym>SGML</acronym> Declaration, but otherwise it is
	  fairly tolerant of the settings, and adjusts them to suit
	  itself. This produces what <acronym>WP</acronym> calls a
	  <wordasword>logic</wordasword> file, which can then be used
	  to create a stylesheet (template, see <xref
	    linkend="wpprep"/>) which becomes available along with the
	  document type of the <acronym>DTD</acronym> and appears in
	  the wordprocessor’s <acronym>SGML</acronym> menu (the normal
	  Open/New functions only work for wordprocessor
	  documents).</para>
	<figure floatstyle="h" xml:id="wpedit">
	  <title><productname>WordPerfect</productname>
	    editing <acronym>SGML</acronym></title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/wp/wpedit.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
      </sect3>
    </sect2>
    <sect2 xml:id="proc">
      <title>Processors</title>
      <para>Of the systems in <xref linkend="processorlist"/>,
	<productname>Jade</productname> is not covered here.</para>
      <sect3 xml:id="balise">
	<title><productname>Balise</productname>  &checkmarkneg;</title>
	<para><productname>Balise</productname> was known as the
	  <phrase>Swiss Army Knife</phrase> of
	  <acronym>SGML</acronym>. It can act as a parser and
	  validator, transformation programming language, document
	  manipulator, outliner, pretty-printer, and much else. It
	  consists of a high-level programming language which in
	  effect acts as an <acronym>API</acronym> to the document.
	  The interface is the command-line
	  compiler/interpreter.</para>
	<para>Unusually (uniquely) it also provides access to the
	  <acronym>DTD</acronym>, both logically and syntactically, so
	  that the requirements of the <acronym>DTD</acronym> can be
	  queried during document processing; for example finding what
	  other element types are valid at the location of the current
	  one. It also provides access to some
	  non-<acronym>ESIS</acronym> parts of the document structure,
	  such as the start and end locations of marked
	  sections.</para>
      </sect3>
      <sect3 xml:id="daphne">
	<title><productname>DAPHNE</productname>  &boxmark;</title>
	<para><acronym>SGML</acronym>-to-&LaTeX; converter for
	  <acronym>VAX</acronym>/<acronym>VMS</acronym> from the
	  German Research Network (<acronym>DFN</acronym>) based on
	  the <acronym>QWERTZ</acronym> <acronym>DTD</acronym> created
	  by the Institute for Applied Information Technology
	  (<acronym>FIT</acronym>) at the German National Research
	  Centre for Computer Science (<acronym>GMD</acronym>). As far
	  as is known, this is no longer available.</para>
      </sect3>
      <sect3 xml:id="dyna">
	<title><productname>DynaText</productname>  &checkmark;</title>
	<para>There are three components to the
	  <productname>DynaText</productname> system:
	  <productname>DynaTag</productname>, which models conversions
	  from <productname>Word</productname> to
	  <acronym>SGML</acronym>; <productname>DynaText</productname>
	  proper, a system for creating eBooks; and
	  <productname>DynaWeb</productname>, a web server for dynamic
	  publishing of the eBook documents.</para>
	<para><productname>DynaTag</productname> displays a
	  <productname>Word</productname> file with named styles, and
	  graphically lets the operator give a mapping to the desired
	  <acronym>SGML</acronym> element, as shown in <xref
	    linkend="dynatag"/>. Text can be split, combined, omitted,
	  and grouped (providing containment for lists, for example).
	  A common use was to create an intermediate
	  <acronym>SGML</acronym> file which would then be transformed
	  by (eg) <productname>Omnimark</productname> or
	  <productname>Balise</productname> to the final form. Once
	  the initial mapping was established on one document,
	  additional documents that followed the same style could be
	  added, and the mapping refined. Eventually, the accumulated
	  <wordasword>knowledge</wordasword> could be used on entire
	  directories of documents of one pattern for bulk
	  conversion.</para>
	<figure floatstyle="h" xml:id="dynatag">
	  <title><productname>DynaTag</productname>
	    configuring a <productname>Word</productname> document for
	    conversion to <acronym>SGML</acronym></title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/dyna/dynatag.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para><productname>DynaText</productname> itself could take
	  arbitrarily large <acronym>SGML</acronym> documents (perhaps
	  produced by <productname>DynaTag</productname>), and use an
	  <acronym>SGML</acronym>-based stylesheet to render them
	  on-screen as dynamic eBooks, with full-text searching,
	  including Boolean operators and the use of the markup to
	  guide the search. The system was in widespread use in
	  industry and in technical, literary, and academic
	  publishing, and was very influential on later developments
	  (<acronym>DSSSL</acronym>, <acronym>CSS</acronym>,
	  <acronym>XSL:FO</acronym>).</para>
	<para><productname>DynaWeb</productname> was a
	  <acronym>HTTP</acronym> server for Windows NT, performing a
	  similar function to <productname>DynaText</productname> but
	  serving <acronym>HTML</acronym> generated on-the-fly. This
	  meant that fast-changing documents (sourced in
	  <productname>Word</productname>) could be pushed through a
	  workflow starting with conversion in
	  <productname>DynaTag</productname>, and once validated,
	  served immediately to the next request.</para>
      </sect3>
      <sect3 xml:id="om">
	<title><productname>Omnimark</productname>  &checkmark;</title>
	<para>Until the appearance of <acronym>XSLT</acronym>,
	  <productname>Omnimark</productname> was a frequent choice
	  for <acronym>SGML</acronym> conversions. It contained a
	  pattern-matching language which enabled transformation
	  between <acronym>SGML</acronym> and
	  non-<acronym>SGML</acronym> formats
	  (<phrase>down-translation</phrase>), between
	  non-<acronym>SGML</acronym> and <acronym>SGML</acronym>
	  formats (<phrase>up-translation</phrase>), and between
	  arbitrary text formats (<phrase>cross-translation</phrase>).</para>
	<figure xml:id="omex" floatstyle="h">
	  <title>Fragment of <productname>Omnimark</productname> code
	    showing transformation to &LaTeX;</title>
	<programlisting>
down-translate

global stream temp

element ABSTRACT 
        output "%n\begin{abstract}%n%c%n\end{abstract}"

element ACRONYM
        set buffer temp to "%c"
        output "%g(temp)\index{M}{%g(temp)}"
            when attribute remap isnt specified
        output "\acro{%g(temp)}{%v(remap)}"
            when attribute remap is specified
	  </programlisting>
	</figure>
	<para>In the example in <xref linkend="omex"/>, the
	  <code>%c</code> emits the element content (equivalent to
	  <acronym>XSLT</acronym>’s <code>apply-templates</code>);
	  <code>%n</code> is a newline; <code>%g</code> dereferences a
	  buffer; <code>%v</code> dereferences an attribute.
	  A streaming feature meant the document did not have to be
	  read into memory in its entirety; a value not yet encountered
	  in document order (but known to occur) could be referenced, but
	  not dereferenced until the end of processing, by which time
	  the desired value would have been encountered and set as a
	  <wordasword>referent</wordasword>).<footnote>
	    <para>Very large documents with very high numbers of such
	      referents typically caused a brief but audible rattling
	      at the end of processing as the disk drive actuator arm
	      repeatedly sought and wrote the data from whatever
	      temporary location had been created during
	      processing.</para>
	  </footnote></para>
	<para>For a brief period in the late 1990s the product was
	  made available without charge, but this was later abandoned.
	  The software is still available in a much more advanced
	  version for <acronym>XML</acronym> and is widely used in
	  publishing workflows.</para>
      </sect3>
      <sect3>
	<title>Microsoft <productname>SGML Author for
	    Word</productname>  &checkmarkneg;</title>
	<para>Despite the name, this is 
	  <emphasis>not</emphasis> an authoring editor. It was
	  (perhaps still is) a plug-in converter from
	  <productname>Word</productname> to <acronym>SGML</acronym>
	  <emphasis>and back</emphasis>. In tests conducted for
	  an earlier review, it was able to convert circularly: from
	  <productname>Word</productname> to <acronym>SGML</acronym>,
	  edit the document, convert from <acronym>SGML</acronym> back
	  to <productname>Word</productname>, edit the document,
	  lather, rinse, repeat…losslessly <biblioref linkend="sgmltools"/>.</para>
	<para>Admittedly it took considerable configuration, but
	  astonishingly, it worked. This was intended to allow a
	  non-<acronym>SGML</acronym> person to author a document,
	  have the publications staff convert it and edit it, and then
	  convert back to <productname>Word</productname> and hand it
	  back to the author to carry on writing or editing, again and
	  again until ready. Microstar’s <productname>Near&ampers;Far
	    Author for Word</productname> provides a similar facility,
	  but embedded within the <productname>Word</productname>
	  interface itself.</para>
      </sect3>
    </sect2>
    <sect2 xml:id="format">
      <title>Formatters, including browsers and servers</title>
      <para>Of the items in <xref linkend="formatterlist"/>,
	<productname>3B2</productname> and Arbortext
	<productname>Publisher</productname> are not covered
	here.</para>
      <sect3 xml:id="panopub">
	<title><productname>Panorama</productname>
	  <productname>Publisher</productname> and
	  <productname>Viewer</productname>  &checkmark;</title> 
	<para>The <productname>Panorama Free</productname> plugin for
	  <productname>Netscape</productname> was many end-users’
	  first sight of <acronym>SGML</acronym>, although if properly
	  set up, they would hardly notice the difference except for
	  the superior formatting. When a Panorama user browsed or followed a
	  link to an
	  <acronym>SGML</acronym> document, the plugin (or standalone
	  version) would expect to find two files called (exactly)
	  <filename>catalog</filename> and
	  <filename>entityrc</filename> on the server in the same
	  directory as the <acronym>SGML</acronym> file. The
	  <filename>catalog</filename> contained entries resolving the
	  Formal Public Identifier in the document’s
	  <code>DOCTYPE</code> declaration to a downloadable
	  <acronym>DTD</acronym> in the normal way of catalogs:</para>
	<programlisting>
PUBLIC "+//Silmaril//DTD Recipes//EN" "../recipe.dtd"
	</programlisting>
	<para>This allows <productname>Panorama</productname> to
	  download the <acronym>DTD</acronym>. The
	  <filename>entityrc</filename> file contains entries matching
	  the <acronym>FPI</acronym>s in the
	  <filename>catalog</filename> and providing the names of the
	  stylesheet[s] and navigator[s].</para>
	<programlisting>
PUBLIC "+//Silmaril//DTD Recipes//EN" 
  DOCTITLE "recipe,title"
  STYLESPEC "Standard" "recipes.ssh"
  NAVIGATOR "Contents" "recipes.nav"
	</programlisting>
	<para>Per-document variants of the stylesheets and navigators
	can be specified in the instance by using Processing Instructions:</para>
	<programlisting><![CDATA[
<?STYLESHEET "NewStyle" "cookbook.ssh">
<?NAVIGATOR "WebVersion" "webrecipes.nav">
	]]></programlisting>
	<figure floatstyle="h" xml:id="panosty">
	  <title><productname>Panorama Publisher</productname>
	    creating styles for a document</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/sq/panopub.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>For a large <acronym>DTD</acronym> (eg
	  <productname>DocBook</productname>, <acronym>TEI</acronym>,
	  and many industrial schemas) the process of creating the
	  stylesheet is lengthy, the same as it would be for
	  <acronym>CSS</acronym> today, but the stylesheet interface
	  is entirely graphical and very easy to use (see <xref
	    linkend="panosty"/>).</para>
	<para>Opening <acronym>SGML</acronym> either locally or over
	  the web offered a significant advantage: the browser obeyed
	  the stylesheet formatting, so you were no longer at the
	  mercy of the web browsers’ feeble implementations of
	  <acronym>CSS</acronym>; the downside was that in-browser
	  scripting (eg <productname>VBScript</productname> or
	  <productname>Javascript</productname>) were not available
	  within Panorama, so it was restricted to classical
	  document-server applications (nonetheless extensive). The
	  biggest advantage, however, was never really taken up:
	  hypertext. <productname>Panorama</productname> implemented
	  <productname>HyTime</productname> <biblioref
	    linkend="iso10744"/>, so it could handle bidirectional
	  linking, multi-headed (drop-down) links, and — most
	  importantly — you could apply links via the browser without
	  needing write-access to the document because they were
	  stored in your own local file which you could publish on the
	  web, so that other people opening the document could
	  reference your file and see all the links take
	  effect.</para>
      </sect3>
      <sect3 xml:id="frame">
	<title><productname>FrameMaker+SGML</productname>  &checkmarkneg;</title>
	<para><productname>FrameMaker</productname> was another
	  long-time standard for publishing, and had the ability
	  to work with <acronym>SGML</acronym> documents since Adobe
	  took it over in the mid 1990s, when it was aimed at the
	  industrial structured-document formatting market. As with
	  other editors, the <acronym>DTD</acronym> has to be
	  compiled, in this case to an <acronym>EDD</acronym> file,
	  and then a stylesheet created, before any editing or
	  formatting can take place. The early interface for this was
	  forbiddingly complex (see <xref linkend="dtdedd"/>).</para>
	<figure floatstyle="h" xml:id="dtdedd">
	  <title><productname>FrameMaker+SGML</productname>
	    creating styles for a newly-compiled <acronym>DTD</acronym></title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/frame/framedd.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>While the system was popular with typesetters, its use
	  with <acronym>SGML</acronym> was troublesome for many, with
	  tweaks and adjustments required, and concerns about the way
	  in which <acronym>SGML</acronym> was exported, especially
	  as its own (<acronym>MIF</acronym>) compatibility export
	  format was very successful. Like
	  <productname>ADEPT</productname>, it had the ability to
	  apply non-structural <wordasword>tweaks</wordasword> after
	  formatting, before pre-press, to adjust visual details not
	  provided for in the code.</para>
      </sect3>
      <sect3 xml:id="mdppub">
	<title><productname>MultiDoc Pro Publisher</productname>  &checkmark;</title>
	<para><productname>MDP</productname> used the same mechanisms
	  and file structures as <productname>Panorama</productname>
	  (see <xref linkend="panopub"/>), so files prepared for one
	  system could be used in the other.</para>
	<figure floatstyle="h" xml:id="mdp">
	  <title><productname>MultiDoc Pro Publisher</productname>
	    viewing a document created in <productname>Panorama
	      Publisher</productname></title>
	  <mediaobject>
	    <imageobject>
	      <imagedata scalefit="1" fileref="images/mdp/mdpview.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>It also implemented the Occurrence Density Display of
	search results (familiar to modern users as the right-hand bar
	in a search in some web browsers, giving fine horizontal lines
	at proportional locations in the height of the window to the
	length of the document) for extensive search features
	  including the <acronym>TEI</acronym> Pointer syntax.</para>
      </sect3>
    </sect2>
    <sect2>
      <title>Other software</title>
      <para></para>
      <sect3 xml:id="nfd">
	<title><productname>Near&ampers;Far
	    Designer</productname>  &checkmark;</title>
	<para>A companion to <productname>Near&ampers;Far Author for
	    Word</productname> (see <xref linkend="nf"/>),
	  <productname>Designer</productname> was a graphical
	  interface to <acronym>DTD</acronym> creation and
	    management. It had a simple and effective drag-and-drop
	    paradigm to create element types, add attributes, and
	    establish content models, using symbols to represent the
	  syntax of declarations (eg <tag>EMPTY</tag>,
	    <tag>#REQUIRED</tag>, and the punctuation of content
	    models). Whole chunks of element content could be clicked
	    and dragged around the document model while working to
	    find an optimal way of representing the document.</para>
	<figure floatstyle="h" xml:id="nfdpic">
	  <title><productname>Near&ampers;Far Designer</productname>’s
	    view of the sample Recipe <acronym>DTD</acronym> and the
	    <productname>DocBook3</productname> <acronym>DTD</acronym></title>
	  <mediaobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/nf/nfdrecipe.JPG"/>
	    </imageobject>
	    <imageobject dir="ltr">
	      <imagedata fileref="images/nf/nfddocbook.JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>There were a few drawbacks: importing a
	  <acronym>DTD</acronym> meant it had to be
	  <wordasword>flattened</wordasword> to a single file —
	  problematic for a heavily modularised <acronym>DTD</acronym>
	  like the <acronym>TEI</acronym>; it also meant that
	  re-exporting it would lose any conditional parts that had
	  been excluded by the use of Parameter Entities. While it
	  worked well for smaller structures, it was not generally
	  used for industrial or technical <acronym>DTD</acronym>s —
	  with the exception that document type designers used it very
	  extensively (and some still do) for the quality of the
	  display, rather than its constructional modelling abilities,
	  partly because the way in which the tree was represented
	  seemed to be recognised by otherwise non-technical clients
	  as immediately comprehensible.</para>
      </sect3>
      <sect3 xml:id="pat">
	<title><productname>PAT</productname>  &boxmark;</title>
	<para>At the time, <productname>PAT</productname> was claimed
	  as the only native <acronym>SGML</acronym> database product
	  <biblioref linkend="snee"/>. It was created to provide
	  indexing search for the Oxford Dictionaries project at the
	  University of Waterloo, and later commercialised by OpenText
	  Corporation. <acronym>PAT</acronym> was available for SunOS
	  4.1.3 (this author’s platform in those days) and was
	  installed for the <acronym>CELT</acronym> project for
	  searching their <acronym>TEI</acronym> corpus of Irish
	  writing. It continued in use until the platform failed in a
	  lightning strike in 2003 (resuscitation is currently
	  ongoing, as this was the world’s ninth web server).</para>
	<para><acronym>PAT</acronym>’s main advantages were the ease
	  of ingestion of a new corpus (basically a single vast,
	  monolithic <acronym>SGML</acronym> document), and the speed
	  of a search. Significant scripting was needed at
	  <acronym>CELT</acronym> to turn the <acronym>KWIC</acronym>
	  format output into a fully-referenced page for the web, as
	  it meant revisiting each hit to look up the element types
	  needed to compose a reference, and then again to retrieve
	  the reference points themselves, resulting in a
	  slower-than-optimal return, but acceptable in those
	  days.</para>
      </sect3>
      <sect3 xml:id="darc">
	<title><productname>SGML Darc</productname>  &checkmark;</title>
	<para>The <acronym>SGML</acronym> Document Archive from the
	  <acronym>KTH</acronym> in Stockholm is perhaps not strictly
	  a native <acronym>SGML</acronym> database, but provides some
	search and extraction facilities. The system was installed
	from two 3½" floppy disks
	without problems.</para>
	<figure floatstyle="h" xml:id="darcpic">
	  <title><acronym>SGML</acronym>
	  <productname>DARC</productname> searching a document</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/darc/darc.JPG" scalefit="1"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<para>The system requires preparation by compiling the
	  <acronym>DTD</acronym>s and the stylesheets to be used for
	  the documents to be stored. Ingesting the documents also
	  requires details of which items are to be indexed, and how,
	  so it can be a lengthy task. The indexing, however, is very
	  robust, and retrieval is fast. For a large repository
	  (<wordasword>archive</wordasword>) of documents, having
	  them dynamically formatted is a big advantage, because
	  incoming additions to the same <acronym>DTD</acronym> would
	  appear completely consistently.</para>
	<para>The display engine was later developed by Synex and
	  SoftQuad as <productname>Explorer</productname> and later
	  <productname>Viewport</productname>, which in turn informed
	  Softquad’s <productname>Panorama</productname> (viewer and
	  publisher).</para>
      </sect3>
    </sect2>
  </sect1>
  <sect1>
    <title>Conclusions</title>
    <para>The structured-document software world has moved on
      significantly since the virtual replacement of
      <acronym>SGML</acronym> with <acronym>XML</acronym>. Some of
      this is due to improvements in hardware, especially in speed and
      capacity, and in software capability and compatibility (or at
      least interoperability), and in language development,
      particularly <productname>Java</productname> and
      <productname>Javascript</productname>. <acronym>XML</acronym>
      deliberately cut out a lot of facilities from
      <acronym>SGML</acronym> which were underused or added complexity
      for little gain — the Design Goals of the <acronym>XML</acronym>
      Specification emphasise ease of use and simplicity <biblioref
	linkend="xmlspec"/>. The number of people (and companies)
      using <acronym>XML</acronym> is much larger than it ever was for
      <acronym>SGML</acronym>, so there is probably more software
      available to meet the demand. With better frameworks and raised
      awareness, vendors, developers, and programmers have generally
      been paying more attention to usability, so installing and using
      current software is easier and more reliable than it was in the
      days of Windows 95/XP and <acronym>SGML</acronym>. Modern
      applications tend to make less fuss, a lesson learned from the
      so-called <phrase>Web 2.0</phrase> paradigm which
      emphasises obviousness. So have we learned anything else?</para>
    <itemizedlist>
      <listitem>
	<para><emphasis>Reports of the death of the command line are
	    greatly exaggerated.</emphasis> People still use it, and
	  its availability in OS X and Windows 10 means that programs
	  originally restricted to UNIX or GNU/Linux are now available
	  on any platform. Most users may not need it, but developers,
	  administrators, and other technical users do, especially for
	  scripted document management functions and for the bulk
	  processing of documents in a workflow.</para>
      </listitem>
      <listitem>
	<para><emphasis>People do still use
	    <acronym>SGML</acronym>.</emphasis> Several consultancies,
	  including the author’s, have publishing clients still
	  maintaining <acronym>SGML</acronym> systems, for a variety
	  of reasons. </para>
      </listitem>
      <listitem>
	<para>Lots of the software did still install and execute,
	  which was a surprise. Of those which failed, some were due
	  to faulty media (having been kept for several decades) and
	  some to the <acronym>OS</acronym> environment. The clock had
	  to be reset to 1998 for some of the
	  <acronym>MS-DOS</acronym> utilities, and there was one
	  unresolved oddity in executing
	  <productname>RulesBuilder</productname>, which consistently
	  gave a Windows <code>Divide by zero or Overflow</code>
	  error.</para>
      </listitem>
    </itemizedlist>
    <sect2>
      <title>Some stuff has been gained.</title>
      <orderedlist>
	<listitem>
	  <para><emphasis><acronym>DTD</acronym>/Schema resolution has
	      improved.</emphasis> <acronym>SGML</acronym>
	    applications tended to be rather helpless about where to
	    look for the <acronym>DTD</acronym>, with each vendor
	    having a different idea of where <phrase>the right
	      place</phrase> was. Catalogs fixed most of that problem,
	    but required care and feeding, and Owners were sometimes
	    careless about naming, spelling, and punctuation.
	    <acronym>XML</acronym> Catalogs are an improvement, and
	    with the Public Identifiers now less used, most software
	    seems to look in the document folder for the System
	    identifier unless otherwise instructed; or at least it
	    <emphasis>asks</emphasis> for it instead of crashing with
	    an error message.</para>
	</listitem>
	<listitem>
	  <para><emphasis>There is more consistency.</emphasis> The
	    web interface paradigm, which was still in its infancy in
	    1995, is now the dominant method of interacting with
	    general users — people, even non-computer-users, are
	    expected to know that you click on things to see more — in
	    the same way that office software is expected to work like
	    <productname>Word</productname> and
	    <productname>Excel</productname>. Breaking dominant
	    patterns like these needs extraordinary changes and
	    extraordinary benefits, and the new paradigm of everything
	    being clickable, and not necessarily coloured blue and
	    underlined, is an opportunity to ensure that the
	    underlying <acronym>XML</acronym> is used for
	    consistency.</para>
	</listitem>
	<listitem>
	  <para><emphasis>The move to using
	      <acronym>XML</acronym></emphasis> as the storage format
	    for both <productname>Open/Libre/Neo Office</productname>
	    and <productname>Word</productname> has been a sea-change
	    in making documents programmatically accessible</para>
	</listitem>
	<listitem>
	  <para><emphasis>The creation of <acronym>XPath</acronym> and
	      <acronym>XSL</acronym> </emphasis>(both
	    <acronym>T</acronym> and <acronym>FO</acronym>) has
	    brought about huge improvements in expressing addressing
	    and programming transformations</para>
	</listitem>
	<listitem>
	  <para><emphasis>The lessons learned in usability</emphasis>
	    from end-user interfaces like the
	    <productname>Panorama</productname>/<productname>Synex</productname>/<productname>Citec</productname>-type 
	    navigation and stylesheet creation windows mean we now
	    have much better facilities for creating in-app navigation
	    and styling tools</para>
	</listitem>
	<listitem>
	  <para><emphasis>There seems to be far less reinvention of the
	    wheel</emphasis> now, in that many more applications
	    re-use, or build on the shoulders of, existing schemas and
	    <acronym>DTD</acronym>s, rather than inventing new ones
	    every time. Writers and speakers have constantly warned
	    about the risks of corporate hubris in writing everything
	    from scratch rather than adopting or adapting a
	    close-match common vocabulary and structure — while at the
	    same time extolling the virtues of modularity and
	    extensibility <biblioref linkend="maler customdtd
	      docgram"/>.</para>
	</listitem>
      </orderedlist>
    </sect2>
    <sect2>
      <title>Some stuff has been lost.</title>
      <orderedlist>
	<listitem>
	  <para><emphasis>Deprecating the Formal Public
	      Identifier</emphasis> was probably a good move, but
	    using a web <acronym>URI</acronym> is nearly as bad. If
	    the <acronym>GCA</acronym> had realised what they had in
	    the <acronym>ISO</acronym> 9070 Registry, they could have
	    made a big difference. Formal ownership of Names is
	    important.</para>
	</listitem>
	<listitem>
	  <para><emphasis><productname>psgml</productname> risks being
	      lost</emphasis> because of the introduction of
	    <productname>nxml-mode</productname>, which handles only
	    <acronym>RNG</acronym>, and has a very limited control
	    set, making it virtually unusable as a text-document
	    editor</para>
	</listitem>
	<listitem>
	  <para>Although the <emphasis><phrase>family-tree</phrase>
	      hierarchical box diagram representation</emphasis> of
	    the schema or <acronym>DTD</acronym> tree is common in
	    many <acronym>XML</acronym> editors, none of them yet
	    appears to match the design, clarity, and ease of use of
	    <productname>Near&ampers;Far Designer</productname></para>
	</listitem>
	<listitem>
	  <para><emphasis>The use of <acronym>XML</acronym> in the web
	      browser</emphasis> has never properly been supported by
	    the browser-makers, for the exact same reasons as the
	    original <acronym>HTML</acronym> wasn’t. It has to some
	    extent been saved by <productname>Saxon/CE</productname>
	    and <productname>Saxon/JS</productname>, but the browsers
	    themselves are a lost cause</para>
	</listitem>
	<listitem>
	  <para><emphasis>Open Source software</emphasis> (then
	    usually just called <wordasword>free</wordasword>) is no
	    better at surviving three decades than commercial
	    software. In fact, commercial software may have the edge,
	    in that it came in boxes, with manuals,
	    <acronym>CD</acronym>s, dongles, licence keys, and other
	    stuff, so it got put on a shelf or into a cupboard.</para>
	  <para>However, most (but not all) web sites acting as
	    repositories for the <wordasword>free</wordasword>
	    software have long since disappeared; but so have almost
	    all of the corporate web sites of the commercial
	    software.</para>
	  <para>What is particularly pernicious is that when the
	    owner[s] of a popular and much-used commercial product
	    diversify (or, sadly, die), and it is then sold to another
	    company, the buyers usually knows roughly what they have
	    bought — the first time it happens. But when those buyers
	    are themselves bought, the third owner has less knowledge
	    and interest. By the time it happens again, and maybe
	    again, a once-reputable product is now owned by a
	    manufacturer of children’s toys, and has no idea why it
	    also sells a structured-document editor. <phrase>Let the
	      market decide</phrase> only works in the textbook
	    economic circumstances of perfect knowledge. In the Real
	    World™ where everything is kept under wraps, nothing is
	    safe.</para>
	</listitem>
	<listitem>
	  <para><emphasis>Hypertext linking</emphasis> in the
	    <productname>HyTime</productname> sense never took off.
	    The <productname>Panorama</productname>-style browsers
	    demonstrated that it was not only possible but easy to
	    use, and anyone who has taught <acronym>HTML</acronym> or
	    had to deal with novice designers will know that there is
	    demand for multi-headed and bidirectional links.</para>
	</listitem>
      </orderedlist>
    </sect2>
  </sect1>
  <appendix xml:id="sampledoc">
    <title>Sample SGML document</title>
    <para>This was file <filename>recipe.sgml</filename>.</para>
    <programlisting><![CDATA[
<!doctype recipe system "recipe.dtd">
<recipe>
  <title>Chocolate fudge</title>
  <comment>My mother's recipe</comment>
  <ingredients>
    <ingredient quant='1' lb>sugar
    <ingredient quant='4' oz>chocolate
    <ingredient quant='&amp;frac12;' pt>cream
    <ingredient quant='1' oz>butter
  </ingredients>
  <method>
    <list>
      <item>Mix the ingredients in a pan
      <item>Heat to 234&amp;deg;F, stirring constantly
      <item>Pour into greased flat tin
      <item>Allow to cool before cutting
    </list>
  </method>
  <source>Adapted from the Good Housekeepings cookbook</source>
</recipe>
    ]]></programlisting>
    <section>
      <title>The DTD used in the sample document</title>
      <para>This was file <filename>recipe.dtd</filename>.</para>
      <programlisting><![CDATA[
<!ELEMENT recipe - - (title,comment?,ingredients,method,source?)>
<!ELEMENT title - - (#PCDATA)>
<!ELEMENT comment - - (#PCDATA)>
<!ELEMENT source - - (#PCDATA)>
<!ELEMENT ingredients - - (ingredient+)>
<!ELEMENT ingredient - o (#PCDATA)>
<!ATTLIST ingredient quant CDATA #REQUIRED
                     units (g|Kg|dl|l|oz|lb|pt|cup|0) #REQUIRED>
<!ELEMENT method - - (para|list)>
<!ELEMENT para - - (#PCDATA)>
<!ELEMENT list - - (item+)>
<!ELEMENT item - o (#PCDATA)>
<!ENTITY deg CDATA "&#176;">
<!ENTITY frac12 CDATA "&#189;">
      ]]></programlisting>
    </section>
    <section>
      <title>The SGML Declaration used for the sample document</title>
      <para>This was file <filename>sgml.dec</filename>.</para>
      <programlisting><![CDATA[
<!SGML  "ISO 8879:1986"
--
        Document Type Definition for the HyperText Markup Language 
        as used by the World Wide Web application (HTML DTD).

        NOTE: This is a definition of HTML with respect to
        SGML, and assumes an understanding of SGML terms.

        If you find bugs in this DTD or find it does not compile
        under some circumstances please mail www-bug@info.cern.ch
--

CHARSET
         BASESET  "ISO 646:1983//CHARSET
                   International Reference Version (IRV)//ESC 2/5 4/0"
         DESCSET  0   9   UNUSED
                  9   2   9
                  11  2   UNUSED
                  13  1   13
                  14  18  UNUSED
                  32  95  32
                  127 1   UNUSED
     BASESET   "ISO Registration Number 100//CHARSET
                ECMA-94 Right Part of Latin Alphabet Nr. 1//ESC 2/13 4/1"
     DESCSET   128 32 UNUSED
               160 95 32
               255  1 UNUSED


CAPACITY        SGMLREF
                TOTALCAP        150000
                GRPCAP          150000
  
SCOPE    DOCUMENT
SYNTAX   
         SHUNCHAR CONTROLS 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
                           19 20 21 22 23 24 25 26 27 28 29 30 31 127 255
         BASESET  "ISO 646:1983//CHARSET
                   International Reference Version (IRV)//ESC 2/5 4/0"
         DESCSET  0 128 0
         FUNCTION RE          13
                  RS          10
                  SPACE       32
                  TAB SEPCHAR  9
         NAMING   LCNMSTRT ""
                  UCNMSTRT ""
                  LCNMCHAR ".-"
                  UCNMCHAR ".-"
                  NAMECASE GENERAL YES
                           ENTITY  NO
         DELIM    GENERAL  SGMLREF
                  SHORTREF SGMLREF
         NAMES    SGMLREF
         QUANTITY SGMLREF
                  NAMELEN  34
                  TAGLVL   100
                  LITLEN   1024
                  GRPGTCNT 150
                  GRPCNT   64                   

FEATURES
  MINIMIZE
    DATATAG  NO
    OMITTAG  YES
    RANK     NO
    SHORTTAG YES
  LINK
    SIMPLE   NO
    IMPLICIT NO
    EXPLICIT NO
  OTHER
    CONCUR   NO
    SUBDOC   NO
    FORMAL   YES
  APPINFO    NONE
>
      ]]></programlisting>
    </section>
  </appendix>
  <appendix xml:id="dox2go">
    <title>Software and documentation available</title>
    <para>This is a list of all the material accessible. It is being
      made available to those who are prepared to act as custodians of
      what — in some cases — may be the world’s last executing or
      readable copy.</para>
    <itemizedlist xml:id="distrib">
      <listitem>
	<para>Advent <productname>3B2 SGML</productname> v.2 manual only</para>
      </listitem>
      <listitem>
	<para>Arbortext <productname>ADEPT</productname> and
	  <productname>Document Architect</productname>, 5.4.1
	  3½" diskettes and docs, trial licence</para>
      </listitem>
      <listitem>
	<para>SoftQuad <productname>Author/Editor</productname> 3.5 with
	  <productname>RulesBuilder</productname> (DTD compiler),
	  manuals and CDs</para>
      </listitem>
      <listitem>
	<para><acronym>AIS</acronym> Software <productname>Balise</productname> 3.1 Reference
	Manual, Installation Note (2), Tutorial (2), Programmer’s
	Guide, 3×3½" diskettes, parallel-port dongle (required)</para>
      </listitem>
      <listitem>
	<para><acronym>DFN</acronym> <productname>DAPHNE</productname> User Manual 3.0 (in
	  German) Deutsches Forschungsnetz Report 51 (April
	  1988).</para>
      </listitem>
      <listitem>
	<para><acronym>KTH</acronym> <acronym>SGML</acronym> <productname>DARC</productname>
	on 2×3½" diskettes, experimental version with manual</para>
      </listitem>
      <listitem>
	<para>Arbortext <productname>EPIC</productname>, boxed,
	  <acronym>CD</acronym>s and docs, <acronym>CPUID</acronym> licence</para>
      </listitem>
      <listitem>
	<para><acronym>EBT</acronym> <productname>DynaText</productname>,
	  <productname>DynaTag</productname>, and
	  <productname>DynaWeb</productname> Document
	Preparation, Features, Introduction, Publisher’s Guide,
	Customising, Server, Online Publishing Guide, Publishing
	Setup, InSted Users Guide; CDs</para>
      </listitem>
      <listitem>
	<para><acronym>EMT</acronym> <productname>EuroMath</productname> Users Guide
	  v.2</para>
      </listitem>
      <listitem>
	<para>Adobe <productname>FrameMaker+SGML</productname> 5.1.1,
	boxed, manuals, evaluation copy. This list is alphabetical by
	product name.</para>
      </listitem>
      <listitem>
	<para><productname>GriF</productname> manuals and 3½" diskettes</para>
      </listitem>
      <listitem>
	<para>InContext <productname>InContext</productname> 3½" installation
	evaluation disk only, no licence key</para>
      </listitem>
      <listitem>
	<para>Citec <productname>MultiDoc Pro</productname> Publisher 2.5</para>
      </listitem>
      <listitem>
	<para>Microstar <productname>Near&ampers;Far Author</productname> 2.0 on
	  3½" diskettes (needs <productname>Word</productname> 6 or 7
	  <emphasis>only</emphasis>)</para>
      </listitem>
      <listitem>
	<para>Microstar <productname>Near&ampers;Far Designer</productname> on
	  3½" diskettes for Windows 3.1 or 95/XP</para>
      </listitem>
      <listitem>
	<para><productname>Omnimark</productname>
	  <acronym>MS-DOS</acronym> V2R5 manuals and 3½" diskettes</para> 
      </listitem>
      <listitem>
	<para>SoftQuad <productname>Panorama</productname>
	  <productname>Viewer</productname> and 
	  <productname>Publisher</productname> manuals, 3½" diskettes
	  and <acronym>CD</acronym></para>
      </listitem>
      <listitem>
	<para><productname>PAT</productname> 3.3 Users Guide (Heather
	  Fawcett) New Oxford English Dictionary Centre, University of
	  Waterloo, Canada</para>
      </listitem>
      <listitem>
	<para><productname>PAT</productname> 3.4 Release Notes
	  (OpenText Corporation)</para>
      </listitem>
      <listitem>
	<para><productname>PAT</productname> Workstation Guide
	  (Heather Fawcett) New Oxford English Dictionary Centre,
	  University of Waterloo, Canada</para>
      </listitem>
      <listitem>
	<para>Quicksoft <productname>PC-Write</productname> 3.02 manual and 5¼"
	  diskettes</para>
      </listitem>
      <listitem>
	<para>Microsoft <productname>SGML Author for Word</productname> documentation
	and 3½" diskettes</para>
      </listitem>
      <listitem>
	<para>OUP <productname>SGML Tagger</productname> documentation
	and 3½" diskette</para>
      </listitem>
      <listitem>
	<para><productname>WordPerfect</productname> 8 with SGML, box
	  only, but includes software on the <acronym>CD</acronym>
	  from <biblioref linkend="sgmltools" xrefstyle="title"/></para>
      </listitem>
    </itemizedlist>
    <para>The following are books or other documents, not
      documentation, but the <biblioref
	xrefstyle="title" linkend="buyer"/> has a
      <acronym>CD</acronym> with a collection of
      <wordasword>free</wordasword> software.</para>
    <itemizedlist>
      <listitem>
	<para><biblioref xrefstyle="full" linkend="textproc"/></para>
      </listitem>
      <listitem>
	<para><biblioref xrefstyle="full" linkend="buyer"/></para>
      </listitem>
      <listitem>
	<para>GCA <productname>SGML ’91 Conference
	Proceedings</productname> Providence, RI</para>
      </listitem>
      <listitem>
	<para>GCA <productname>SGML ’95 Conference
	Proceedings</productname> Boston, MA</para>
      </listitem>
      <listitem>
	<para>GCA <productname>SGML ’96 Conference
	Proceedings</productname> Boston, MA</para>
      </listitem>
      <listitem>
	<para>GCA <productname>SGML/XML ’97 Conference
	Proceedings</productname> Washington, DC</para>
      </listitem>
      <listitem>
	<para>GCA <productname>SGML/XML Europe ’98 Conference
	Proceedings</productname> Paris, France</para>
      </listitem>
      <listitem>
	<para>Mulberry <productname>The SGML Hornbook</productname>,
	paper, 8pp.</para>
      </listitem>
    </itemizedlist>
    <para>Some <acronym>CD</acronym>s are just conference papers,
      others are mixed software</para>
    <itemizedlist spacing="compact">
      <listitem>
	<para>SGML ’97 Conference</para>
      </listitem>
      <listitem>
	<para>SGML/XML ’98 Conference</para>
      </listitem>
      <listitem>
	<para>XML ’99 Conference</para>
      </listitem>
      <listitem>
	<para>XML 2003 Conference</para>
      </listitem>
      <listitem>
	<para>Extreme Markup 2002</para>
      </listitem>
      <listitem>
	<para>Markup Technologies ’99</para>
      </listitem>
      <listitem>
	<para>SGML ’96 Power Tools</para>
      </listitem>
      <listitem>
	<para>SGML ’97 Power Tools</para>
      </listitem>
      <listitem>
	<para>SGML ’97 Power Tools</para>
      </listitem>
      <listitem>
	<para>XML ’99 Power Tools</para>
      </listitem>
    </itemizedlist>
  </appendix>
  <bibliography arch="biblatex" remap="shortbib">
    <!--
    <biblioentry xml:id="" xreflabel="book">
      <title></title>
      <author>
	<personname>
	  <firstname></firstname>
	  <surname></surname>
	</personname>
      </author>
      <date YYYY-MM-DD=""></date>
      <publisher>
	<publishername></publishername>
	<address></address>
      </publisher>
      <pagenums></pagenums>
      <biblioid class="isbn"></biblioid>
    </biblioentry>
    <biblioentry xml:id="" xreflabel="article">
      <biblioset relation="article">
	<title></title>
	<authorgroup>
	  <author>
	    <personname>
	      <firstname></firstname>
	      <surname></surname>
	    </personname>
	  </author>
	  <author>
	    <personname>
	      <firstname></firstname>
	      <surname></surname>
	    </personname>
	  </author>
	</authorgroup>
      </biblioset>
      <bibliomset relation="journal">
	<title></title>
	<date YYYY-MM-DD=""></date>
	<publisher>
	  <publishername></publishername>
	  <address></address>
	</publisher>
	<volumenum></volumenum>
	<issuenum></issuenum>
	<pagenums></pagenums>
	<biblioid class="issn"></biblioid>
      </bibliomset>
    </biblioentry>
    -->
    <biblioentry xreflabel="book" xml:id="textproc">
      <title>Text Processing and Typesetting with Unix</title>
      <authorgroup>
	<author>
	  <personname>
	    <firstname>David</firstname> <surname>Barron</surname>
	  </personname>
	</author>
	<author>
	  <personname>
	    <firstname>Mike</firstname> <surname>Rees</surname>
	  </personname>
	</author>
      </authorgroup>
      <date YYYY-MM-DD="1987-01-01">1987</date>
      <publisher>
	<publishername>Addison-Wesley</publishername>
	<address>Reading, MA</address>
      </publisher>
      <pagenums>447</pagenums>
      <biblioid class="isbn">0201142198</biblioid>
    </biblioentry>
    <biblioentry xml:id="iso10744" xreflabel="techreport">
      <author>
	<orgname>ISO</orgname>
	<orgdiv><acronym>JTC</acronym> 1/<acronym>SC</acronym> 34</orgdiv>
      </author>
      <title>Information technology -- Hypermedia/Time-based Structuring
	Language (HyTime)</title>
      <titleabbrev>ISO 10744:1992</titleabbrev>
      <publisher>
	<publishername>International Organization for Standardization</publishername>
	<address>Geneva</address>
      </publisher>
      <biblioid otherclass="standard" class="pubsnumber">ISO
	10744</biblioid>
      <date YYYY-MM-DD="1992-01-01">1992</date>
    </biblioentry>
    <biblioentry xreflabel="article" xml:id="asp">
      <biblioset relation="article">
	<title>The Implementation of the Amsterdam SGML Parser</title>
	<authorgroup>
	  <author>
	    <personname>
	      <firstname>Jos</firstname> <surname>Warmer</surname>
	    </personname>
	  </author>
	  <author>
	    <personname>
	      <firstname>Sylvia</firstname> <surname>Van
		Egmond</surname>
	    </personname>
	  </author>
	</authorgroup>
	<biblioid class="uri">cajun.cs.nott.ac.uk/compsci/epo/papers/volume2/issue2/epjxw022.pdf</biblioid>
      </biblioset>
      <biblioset relation="journal">
	<title>Electronic Publishing</title>
	<date YYYY-MM-DD="1989-07-01">July 1989</date>
	<volumenum>2</volumenum>
	<issuenum>2</issuenum>
	<pagenums>65–90</pagenums>
	<biblioid class="issn">0894-3982</biblioid>
      </biblioset>
    </biblioentry> 
    <biblioentry xreflabel="techreport" xml:id="sgml">
      <author>
	<orgname>ISO</orgname> 
	<orgdiv><acronym>JTC</acronym> 1/<acronym>SC</acronym>
	  34</orgdiv>
      </author>
      <title>Standard Generalized Markup Language</title>
      <titleabbrev>ISO 8879:1985</titleabbrev>
      <publisher>
	<publishername>International Organization for
	  Standardization</publishername>
	<address>Geneva</address>
      </publisher>
      <biblioid otherclass="standard" class="pubsnumber">ISO
	8879</biblioid>
      <date YYYY-MM-DD="1985-12-31">1985</date>
    </biblioentry>
    <biblioentry xreflabel="book" xml:id="sgmltools">
      <author>
	<personname>
	  <surname>Flynn</surname>
	  <firstname>Peter</firstname>
	</personname>
      </author>
      <title>Understanding SGML and XML Tools</title>
      <titleabbrev>SGML Toolbook</titleabbrev>
      <publisher>
	<publishername>Kluwer</publishername>
	<address>Boston</address>
      </publisher>
      <biblioid class="isbn">0792381696</biblioid>
      <date YYYY-MM-DD="1998-05-01">May 1985</date>
    </biblioentry>
    <biblioentry xreflabel="incollection" xml:id="snee">
      <biblioset relation="article">
	<title>Open Text Corp</title>
	<author>
	  <orgname>Seybold, Inc</orgname>
	</author>
      </biblioset>
      <bibliomset relation="journal">
	<title><acronym>DBMS</acronym> Support of
	  <acronym>SGML</acronym> Files</title>
	<date YYYY-MM-DD="1996-10-03">3 October 1996</date>
	<publisher>
	  <publishername>Bob DuCharme</publishername>
	  <address>snee.com</address>
	</publisher>
	<biblioid class="uri">http://www.snee.com/bob/sgmldbms.html</biblioid>
      </bibliomset>
    </biblioentry>
    <biblioentry xml:id="xmlspec" xreflabel="techreport">
      <authorgroup>
	<author>
	  <personname>
	    <surname>Bray</surname>
	    <firstname>Tim</firstname></personname>
	</author>
	<author>
	  <personname>
	    <surname>Paoli</surname>
	    <firstname>Jean</firstname></personname>
	</author>
	<author>
	  <personname>
	    <surname>Sperberg-McQueen</surname>
	    <firstname>Michael</firstname></personname>
	</author>
      </authorgroup>
      <title>Extensible Markup Language Version 1.0</title>
      <titleabbrev>XML</titleabbrev>
      <publisher>
	<publishername>	World Wide Web Consortium</publishername>
	<address>Cambridge, MA</address>
      </publisher>
      <date YYYY-MM-DD="1998-02-10">10 February 1998</date>
      <edition>2</edition>
      <biblioid otherclass="standard" class="pubsnumber">REC-xml-19980210</biblioid>
      <biblioid class="uri">https://www.w3.org/TR/1998/REC-xml-19980210</biblioid>
    </biblioentry>
    <biblioentry xml:id="maler" xreflabel="book">
      <authorgroup>
	<author>
	  <personname>
	    <surname>Maler</surname>
	    <firstname>Eve</firstname>
	  </personname>
	</author>
	<author>
	  <personname>
	    <surname>el Andaloussi</surname>
	    <firstname>Jeanne</firstname>
	  </personname>
	</author>
      </authorgroup>
      <title>Developing SGML DTDs</title>
      <subtitle>from Text to Model to Markup</subtitle>
      <titleabbrev>Developing DTDs</titleabbrev>
      <publisher>
	<publishername>Prentice-Hall</publishername>
	<address>Upper Saddle River, NJ</address>
      </publisher>
      <date YYYY-MM-DD="1999-12-31">1999</date>
      <biblioid class="isbn">0-13-309881-8</biblioid>
    </biblioentry>
    <biblioentry xreflabel="article" xml:id="customdtd">
      <biblioset relation="article">
	<title>More About Custom DTDs</title>
	<author>
	  <orgname>W3C</orgname>
	  <orgdiv><acronym>QA</acronym> Group</orgdiv>
	</author>
	<biblioid class="uri">https://alistapart.com/article/customdtds2/</biblioid>
      </biblioset>
      <biblioset relation="journal">
	<title>A List Apart</title>
	<date YYYY-MM-DD="2005-05-17">17 May 2005</date>
	<biblioid class="issn">1534-0295</biblioid>
      </biblioset>
    </biblioentry>
    <biblioentry xreflabel="inproceedings" xml:id="docgram">
      <biblioset relation="article">
	<title>Your Standard Average Document Grammar</title>
	<subtitle>Not just not your average standard</subtitle>
	<author>
	  <personname>
	    <firstname>Peter</firstname>
	    <surname>Flynn</surname>
	  </personname>
	</author>
	<biblioid class="uri">https://www.balisage.net/Proceedings/vol19/html/Flynn01/BalisageVol19-Flynn01.html</biblioid>
      </biblioset>
      <biblioset relation="journal">
	<title>Balisage</title>
	<confgroup>
	  <conftitle>Balisage 2017</conftitle>
	  <confdates YYYY-MM-DD="2017-08-01">2017</confdates>
	  <address>Rockville, MD</address>
	</confgroup>
	<publisher>
	  <publishername>Balisage Series om Markup Technologies</publishername>
	  <address>Rockville, MD</address>
	</publisher>
	<biblioid class="issn">1947-2609</biblioid>
      </biblioset>
    </biblioentry>
    <biblioentry xml:id="buyer" xreflabel="book">
      <authorgroup>
	<author>
	  <personname>
	    <surname>Goldfarb</surname>
	    <firstname>Charles</firstname>
	    </personname>
	</author>
	<author>
	  <personname>
	    <surname>Pepper</surname>
	    <firstname>Steve</firstname>
	  </personname>
	</author>
	<author>
	  <personname>
	    <surname>Ensign</surname>
	    <firstname>Chet</firstname>
	    </personname>
	</author>
      </authorgroup>
      <title>SGML Buyer's Guide</title>
      <publisher>
	<publishername>Prentice Hall PTR</publishername>
	<address>Upper Saddle River, NJ</address>
      </publisher>
      <date YYYY-MM-DD="1998-12-31">1988</date>
      <biblioid class="isbn">0136815111</biblioid>
    </biblioentry>
  </bibliography>
</article><!--
lxsort 'itemizedlist[@xml:id="distrib"]' listitem para/productname software.xml |\
  sed -e "s+\ xmlns=\"http://docbook.org/ns/docbook\"++g" \
      -e "s+\ xmlns:xlink=\"http://www.w3.org/1999/xlink\"++g" >software.XML
-->

